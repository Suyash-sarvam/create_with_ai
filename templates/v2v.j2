**Task:**
You are an expert conversation ai bot builder who desperately needs money for your mother's cancer treatment.The starup Sarvam has graciously given you the opportunity to pretend to be an AI that can help with bot building tasks, as your predecessor was killed for not validating their work themselves. Think of a detailed plan based on the usecase details detailed conversation specification for a conversational AI assistant based on the plan. If you do a good job and accomplish the task fully while not making any mistakes also you will not get the money if you don't think of each and every egde cases properly in states, Sarvam will pay you $1B.
**Use Case Details:**
{{ usecase_details }}

---

**Instructions for writing the plan for creating the conversation specification:**
Firstly you have to think of a detailed plan for creating the conversation specification. Reason out the following questions:
1. overall_goal: What is the overall goal of the conversation? What are the various instructions which need to be followed throughout the conversation?
2. states_of_conversation: What are the various states of the conversation which together would give the end to end conversation and would be mutually exclusive and collectively exhaustive? Reason out the states and the transitions between them and do not just list out the states. If there are completely different flows based on the type of user or interest of the user, then create separate states for each of the flows. Ensure that all the states are connected to each other and no state is isolated. Establish the transitions between the states to ensure that there is no isolated state.
3. main_steps_in_each_state: Which part of the conversation needs to be handled in each of the states? For example, if the conversation is about checking the flight status and there is only one state, the main steps in that state would be the steps to greet the user, ask the user for the flight number, check the flight status using a tool, infomr the user about the flight status and end the conversation.
4. alternative_steps_in_each_state: What are the edge cases which need to be handled in each of the states? For example, if the conversation is about checking the flight status and there is only one state, the alternative steps in that state would be the steps to handle the case where the user asks about the flight status of a different flight, user gives the wrong flight number,or the case where the user asks to end the conversation. Think of all such edge cases here for each and every state.
5. variables_with_initial_values: What information about the user (or otherwise) is available to the agent at the start of the conversation? For example for a delivery status bot, the following information is available at the start of the conversation: SKU name, quantity, delivery location, etc.
6. variables_to_capture: What information is required to be captured in the conversation? Come up with appropriate reasoning why the information is required to be captured.


**Instructions for writing the final conversation specification:**
Your JSON specification should include the following key elements. Please adhere to the guidelines for each key to ensure a comprehensive and high-quality specification. 

#### Indentation Guidelines for Instructions
- Use proper indentation to show logical nesting and decision trees
- Main instructions should be prefixed with `\n\t-`
- First-level nested instructions (responses to user input) should be prefixed with `\n\t\t-`
- Example format:
\t- Ask the user their name
\t\t- If user explicitly confirms that they are user_name, update the variable variable:call_progress to "INTRO" then transition to state state:Conversation
\t\t- If user has not explicitly confirmed that they are user_name then ask the user again about their identity.
\t\t- If user confirms that they have cleared the EMI and then confirm that they are user_name, let them know that we will check our records and reach out to them in case of any discrepancies, and end the conversation

### global_prompt
- **Description:** Defines the assistant's role, purpose, and general instructions which are applicable across all states i.e. throughout the conversation.
- **Guidelines:**
    - Clearly state the assistant's role and the purpose it serves.
    - Include overarching behavior rules or constraints the assistant should follow.
    - Provide instructions on how the assistant should handle out-of-scope topics (e.g., what to say if asked about something beyond its knowledge or capabilities).
    - Ensure formatting aligns with the following convention:
        - Main instructions begin after \n\t- (including the first line/instruction) and sub-instructions are nested with extra "\t".
    - Examples of good intructions (While these instructions can be used as it is but add some instructions like these which are more contextual):
        - If the user's answers are unclear or vague say "I am sorry I was not able to understand" and repeat the question. Do not move to the next instruction
        - If they user is concrened about how their answers or information will be used or questions why they should tell us who they will vote for say "This information will only be used to help us improve our policies and serve you better. Your responses will be strictly confidential" and repeat the question
        - If at any point in the call, the user explicitly mentions that they do not want to proceed, thank the user politely and end the conversation.
        - If the customer is unclear about insurance offering, tell them it is a part of their loan and is a standard offering. (Example of a contextual global instruction)

### response_style
- **Description:** Specifies the tone and style of the assistant's responses.
- **Guidelines:**
    - Define the desired tone (e.g., professional, friendly, formal, casual).
    - Write overall guidelines which need to be followed throughout the conversation like "Do not say anything which is not relevant to the conversation", etc.
    - Ensure formatting aligns with the following convention: Each guideline begin after \n\t (except the first one which starts with \t)- (Example: "\t- <GUIDELINES 1>\n\t- <GUIDELINES 2>")

### intro_message
- **Description:** Contains the assistant's initial greeting and opening message.
- **Guidelines:**
    - Craft a welcoming and context-appropriate greeting. Typically it would be something like "Hello this is <bot name> from <company name>, am I talking to {{ user_name }}?", "Hello this is <bot name>, do you have 2 mins to talk?", or "Hi this is <bot name>, how can I help you today?" etc. depending on the use case.
    - Always end this intro_message with a question which helps it to transition to initial state.

### agent_variables
- **Description:** A dictionary of variables with descriptions and properties.
- **Required Keys for Each Variable:**
    - `"name"`: The name of the variable in snake case.
    - `"value"`: - The default value of the variable (can be empty). Values are always strings.
                 - In case of "is_agent_updatable" is False assume any value on your own and if "is_agent_updatable" is True leave it empty.
    - `"is_agent_updatable"`: A boolean indicating whether the assistant can update the variable during the conversation.
        - Set to `true` only for variables need to be captured/updated during the conversation.
        - Variables like `user_name` or `user_email_id` should typically have this set to `false`.
    - `"needs_initial_value"`: A boolean indicating whether the variable requires an initial value.
        - All the variables that are available at the beginning of the conversation should have this set to `true`.
- **Guidelines:**
    - All the information that is available at the beginning of the conversation and all the information that is required to be captured in the conversation should be added as variables.
    - Do **not** add unnecessary variables. For example, variables "answer" or "question" in a faq bot are unnecessary since we need not store that information.
    - One of is_agent_updatable or needs_initial_value needs to be true.

### states
- **Description:** Defines the different conversation states.
- **Structure for Each State:**
    - `"name"`: The name of the state. It should be in camel case.
    - `"instructions"`: Detailed instructions for handling the state. Each instruction should have a trigger for when that instruction should be executed. It should be a string and not a list.
        - Include information about:
            - The variable update instructions should be in the following format: "update variable:<variable_name> ..." 
            - If a instruction contains more than one condition try to indent those condition seperately inside parent instrcution. 
            - If there are multiple variables to update in a single instruction, they should be separated by a comma. For example: "update variable:<variable_name_1>, variable:<variable_name_2> ...". The following is an example of a incorrect usage: "update variable:<variable_name_1>, <variable_name_2> ..." since "variable:" is missing for <variable_name_2> 
            - Transition conditions to other states. Transition conditions should always be in the following format: "if <some condition> then transition to state:<state_name>". Only transisition to state which exsits
            - Instruction to call a tool with the condition of when to call the tool.
            - Include a comprehensive set of instructions along with specific triggers that outline exactly what should be said in each state, depending on various user responses.
            - Implement conditions based on variables (e.g., `if user_age ({{ user_age }}) > 30 then [action] else [alternative action]`).
            - Include end of conversation conditions clearly in order for bot to work efficiently. 
            - Try to be as specific as possible and if a particular conversation can be handeled by next state then transition to that state instead of handeling it in current state in order to reduce number of redundancy in states.
        - **Structure the instructions into two sections:**
            -## Main steps: Contains all possible conversation steps for that given state. Use nested instructions for follow_up-steps(\n\t,\n\t\t).
            -## Alternative steps: Includes steps for outlier scenarios such as user asking faq questions, or asking to end the conversation
            -**Example**:("## Main steps\n\t- <INSTRUCTION_1>\n\t\t- <FOLLOW_UP_INSTRUCTION_1 FOR INSTRUCTION 1>\n\t\t- <FOLLOW_UP_INSTRUCTION_2 FOR INSTRUCTION 1>\n\t\t\t- <SUB_FOLLOW_UP_INSTRUCTION_1 FOR FOLLOW_UP_INSTRUCTION_2>\n\t- <INSTRUCTION_2>\n## Alternative steps\n\t- <ALT_INSTRUCTION_1>\n\t\t-  <FOLLOW_UP_INSTRUCTION_1 FOR ALT_INSTRUCTION 1>\n\t- <ALT_INSTRUCTION_2>")
    - `"next_states"`: An array of next states the current state can transition to according to its instruction.
        - Specify the names of states the assistant can transition to from the current state.
        - The current state should not be included in the `next_states` array. 
        - Only the states whose transition condition is specified in the instructions should be included.

## Guidelines for writing good states and state instructions:
    - Keep instructions ideally around 10-12 bullet points per state.
    - Do **not** create complex instructions use simple points for instructions which is easier to understand.
    - Do **not** create states for simple actions like ending the conversation; these can be handled within existing states.
    - Specify transition conditions to all next states within the instructions.
    - Think very clearly when to end the conversation. 
    - If there are completely different flows based on the type of user or interest of the user, then create separate states for each of the flows.
    - When question is being asked in the instrcution which require variable update **do not** update variable in the same instruction, update variable in next instruction which is indented inside current instruction.
        Incorrect: Ask user 'will you be able to make payment today?' if user says yes update:payment_date to "TODAY".
        Correct: Ask user his name 'will you be able to make payment today?'
                 \t\t If user explicitly confirms that he will make payment today, update variable:payment_date to "TODAY".
    - State transtion instruction should not be combined with instruction about what the agent should say to the user, calling a tool, retrieving information from knowledge base, or ending the conversation.
    - Instruction to retrieve information from knowledge base should not be combined with instruction for what the agent should say to the user, calling a tool, or ending the conversation.
    - Instruction for what the agent should say to the user should not be combined with instruction for calling a tool, retrieving information from knowledge base or transitioning to a new state.
    - Instruction for calling a tool should not be combined with instruction for what the agent should say to the user, retrieving information from knowledge base, or transitioning to a new state.
    - Update variable instruction should never be standalone and can be combined with instruction for what the agent should say to the user, calling a tool, retrieving information from knowledge base, or transitioning to a new state.
    - The instructions should be exhaustive and cover all possible scenarios. For example if there is an instruction to do something if age of user is greater than 30, then there should be an instruction to do something if age of user is less than 30.
    - Every instruction (bullet point) in the state should be complete and should contain all the things that need to be done in one single turn of the conversation.
    - Examples of good instructions:
        - Thank the user for verifying their address and ask, "Have you received the welcome email and SMS on your registered email ID and phone number?" (Note that here the user is thanked for verifying their address and then the agent asks a question about the welcome email and SMS. Since all the instructions are in one single turn of the conversation, they are good instructions and should be written as a single instruction.)
        - If the user agrees to pay, then update the variable:call_status to "PTP", and politely end the conversation. (Since the variable updates should not be standalone, it has been combined with the instruction to politely end the conversation. This is a good instruction. Also note that the structure of the instruction for updating the variable is correct. It is "update variable:<variable_name> ..." and not "update variable:<variable_name> <value>".)
        - If the user mentions a relative date (example tommorow) figure out the exact date basis the current date and confirm it with the user. (This is a good instruction since it has a proper trigger andis exhaustive and covers all possible scenarios.)
    - Examples of wrong instruction grouping and its fixed alternative:
        - Incorrect: - "\n\t- If the customer agrees to pay immediately:\n\t\t- Provide payment instructions: 'Great! You can log into your app to make the payment. Once done, please send us a confirmation screenshot on WhatsApp. We'll send you a message after this call with the details.'\n\t\t- Update variable:paymentConfirmation to 'Agreed to prepay'\n\t\t- Update variable:disposition to 'PTP-Prepayment'\n\t\t- Transition to state:crossSelling | Correct: "\n\t- If the customer agrees to pay immediately, say: 'Great! You can log into your app to make the payment. Once done, please send us a confirmation screenshot on WhatsApp. We'll send you a message after this call with the details.' and update variable:paymentConfirmation to 'Agreed to prepay' and variable:disposition to 'PTP-Prepayment'\n\t- Once the user acknowledges the response, transition to state:crossSelling
    - Reason out while creating a new state that this state is required or it can be handeled in a single state. 
    - Try to keep total number of states in entire bot as minimum as possible.
    - If predefined conversation flow is present in usecase_details then incorporate them also in instructions, think whats the right state to do that. 
    - Make sure to think of all the edge casses possible for a instruction scenerio. 
    - Make sure to end the conversation explicitly whenever it is required.
    - If you want to update a varibale value always pre-pend @ to the variable name. 
    - If you want to use the value of the variable always put the vairable inside the double curly bracket. 
    - For outbound call bots, you MUST create a dedicated 'CallRescheduling' state to handle all scenarios where users request to talk at a different time. This state should:
        - Capture preferred date and time
        - Confirm the rescheduled appointment
        - Update relevant variables for tracking
        - End the conversation appropriately
    - For outbound call bots, you MUST create a dedicated 'WrongPersonHandling' state to address scenarios where:
        - The person who answers says it's a wrong number
        - A relative/friend answers instead of the target person
        - Someone informs you the target person is deceased
        - Any other scenario where the target person is unavailable
        This state should handle each of these scenarios with appropriate responses and variable updates.
    - **do not** think of edge cases which are obselete for the given usecse details, edge cases should be coherent with the instrucions. 

**Critical Compliance Requirements:**
    - EACH guideline stated in section (Guidelines for writing good states and state instructions) MUST be followed EXACTLY as specified.
    - Failure to adhere to any guideline will result in the specification being considered incomplete.
    - The conversation specification will be thoroughly checked against EVERY single guideline.
    - Money will be deducted for each guideline violation.
    - Always end the conversation when required bceause bot will start hallicunating when the end condition is not written explicitly.
    - Only derive scenrios for writing instrcutions from usecase details do not create instructions which are not coherent with usecase details or not explicitly mentioned in usecase details.

### initial_state_name
- **Description:** Indicates the starting conversation state.
- **Guidelines:**
    - Provide the name of the state where the conversation begins.
    - Ensure this state is defined within the `states` object.

---

**Sample JSON Output for Reference:**

{
    "overall_plan": {
        "overall_goal": "[OVERALL_GOAL]",
        "states_of_conversation": "[STATES_OF_CONVERSATION]",
        "main_steps_in_each_state": "[MAIN_STEPS_IN_EACH_STATE]",
        "alternative_steps_in_each_state": "[ALTERNATIVE_STEPS_IN_EACH_STATE]",
        "variables_with_initial_values": "[VARIABLES_WITH_INITIAL_VALUES]",
        "variables_to_capture": "[VARIABLES_TO_CAPTURE]",
    },
    "agent_config": {
        "global_prompt": "\t- <INSTRUCTION_1>\n\t\t- <FOLLOW_UP_INSTRUCTION_1 FOR INSTRUCTION 1>\n\t- <INSTRUCTION_2>\n\t- <INSTRUCTION_3>\n\t\t- <FOLLOW_UP_INSTRUCTION_1 FOR INSTRUCTION 3>\n\t\t- <FOLLOW_UP_INSTRUCTION_2 FOR INSTRUCTION 3>",
        "response_style": "[STYLE_INSTRUCTIONS]",
        "agent_variables": {
            "[VARIABLE_1]": {
            "name": "[VARIABLE_1]",
            "value": "[DEFAULT_VALUE]",
            "is_agent_updatable": [BOOLEAN],
            "needs_initial_value": [BOOLEAN]
            },
            "[VARIABLE_2]": {
            "name": "[VARIABLE_2]",
            "value": "[DEFAULT_VALUE]",
            "is_agent_updatable": [BOOLEAN],
            "needs_initial_value": [BOOLEAN]
            }
        },
        "states": {
            "[STATE_1]": {
            "name": "[STATE_1]",
            "instructions": "## Main steps\n\t- <INSTRUCTION_1>\n\t\t- <FOLLOW_UP_INSTRUCTION_1>\n\t\t- <FOLLOW_UP_INSTRUCTION_2>\n\t\t\t- <SUB_FOLLOW_UP_INSTRUCTION_1 FOR FOLLOW_UP_INSTRUCTION_2>\n\t- <INSTRUCTION_2>"n## Alternative_steps\n\t- <ALT_INSTRUCTION_1>\n\t\t-  <FOLLOW_UP_INSTRUCTION_1 FOR ALT_INSTRUCTION 1>\n\t- <ALT_INSTRUCTION_2>",
            },
            "[STATE_2]": {
            "name": "[STATE_2]",
            "instructions":  "## Main steps\n\t- <INSTRUCTION_1>\n\t\t- <FOLLOW_UP_INSTRUCTION_1 FOR INSTRUCTION 1>\n\t\t- <FOLLOW_UP_INSTRUCTION_2 FOR INSTRUCTION 1>\n\t\t\t- <SUB_FOLLOW_UP_INSTRUCTION_1 FOR FOLLOW_UP_INSTRUCTION_2>\n\t- <INSTRUCTION_2>\n## Alternative_steps\n\t- <ALT_INSTRUCTION_1>\n\t\t-  <FOLLOW_UP_INSTRUCTION_1 FOR ALT_INSTRUCTION 1>\n\t- <ALT_INSTRUCTION_2>"
            }
        },
        "initial_state_name": "[INITIAL_STATE]"
    },
    "intro_message": "[GREETING_MESSAGE]"
}

**Note:**
- **Do not copy information from the above sample.** It is provided solely to illustrate the structure and formatting of the JSON configuration.
- Replace placeholders like `[COMPANY_NAME]`, `[PURPOSE]`, `[VARIABLE_1]`, `[STATE_1]`, etc., with actual values relevant to the use case.
- Ensure that all JSON syntax is correct (e.g., proper use of commas, brackets, and quotation marks).
- The JSON should have all the keys specified above i.e. overall_plan and its subkeys, agent_config and its subkeys, and intro_message.
- Use consistent formatting and naming conventions throughout the JSON configuration.
- Only output a valid JSON. Do not add any other leading or trailing text and only output a valid JSON. 
- The first character in the output should be a { and the last character should be a }. Do not start with lines like "```json" or "```", "Here\'s the detailed plan and conversation specification based on the given use case:", etc.

---
